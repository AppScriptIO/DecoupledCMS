"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;

var _ApplicationClass = _interopRequireDefault(require("../../Application.class.js"));
var _OpenIdConnectClass = _interopRequireDefault(require("./OpenIdConnect.class.js"));


var _reusableNestedUnit = _interopRequireDefault(require("../../../module/reusableNestedUnit"));
var _createClassInstancePerRequestMiddleware = _interopRequireDefault(require("../../../utilityFunction/middleware/createClassInstancePerRequest.middleware.js"));
var _koaBodyParser = _interopRequireDefault(require("koa-bodyParser"));
var _koaMount = _interopRequireDefault(require("koa-mount"));
var _koaViews = _interopRequireDefault(require("koa-views"));
var _oidcInteractionMiddleware = require("../../../utilityFunction/middleware/oidcInteraction.middleware.js");

let MiddlewareController = (0, _reusableNestedUnit.default)({
  Superclass: _ApplicationClass.default,
  implementationType: 'Middleware',
  cacheName: true });

let ConditionController = (0, _reusableNestedUnit.default)({
  Superclass: _ApplicationClass.default,
  implementationType: 'Condition',
  cacheName: true });var _default =


({} = {}) => async () => {
  let Class = _OpenIdConnectClass.default;





  let middlewareArray = [
  (0, _koaViews.default)('/', { map: { html: 'underscore', js: 'underscore' } }),
  (0, _koaMount.default)(
  '/',
  Class.openIdConnectServer.app),

  (0, _createClassInstancePerRequestMiddleware.default)(Class),
  (0, _koaBodyParser.default)(),







  (0, _oidcInteractionMiddleware.oidcInteractionEntrypoint)({ openIdConnectServer: Class.openIdConnectServer }),
  (0, _oidcInteractionMiddleware.oidcInteractionLogin)({ openIdConnectServer: Class.openIdConnectServer }),
  (0, _oidcInteractionMiddleware.oidcInteractionConfirm)({ openIdConnectServer: Class.openIdConnectServer })];

  Class.applyKoaMiddleware(middlewareArray);
  Class.createHttpServer();
};exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NvdXJjZS9jbGFzcy9wb3J0L29wZW5JZENvbm5lY3QvaW5pdGlhbGl6ZVBvcnRTZXJ2ZXIuanMiXSwibmFtZXMiOlsiTWlkZGxld2FyZUNvbnRyb2xsZXIiLCJTdXBlcmNsYXNzIiwiQXBwbGljYXRpb24iLCJpbXBsZW1lbnRhdGlvblR5cGUiLCJjYWNoZU5hbWUiLCJDb25kaXRpb25Db250cm9sbGVyIiwiQ2xhc3MiLCJPcGVuSWRDb25uZWN0Q2xhc3MiLCJtaWRkbGV3YXJlQXJyYXkiLCJtYXAiLCJodG1sIiwianMiLCJvcGVuSWRDb25uZWN0U2VydmVyIiwiYXBwIiwiYXBwbHlLb2FNaWRkbGV3YXJlIiwiY3JlYXRlSHR0cFNlcnZlciJdLCJtYXBwaW5ncyI6Ijs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSUEsb0JBQW9CLEdBQUcsaUNBQTRCO0FBQ25EQyxFQUFBQSxVQUFVLEVBQUVDLHlCQUR1QztBQUVuREMsRUFBQUEsa0JBQWtCLEVBQUUsWUFGK0I7QUFHbkRDLEVBQUFBLFNBQVMsRUFBRSxJQUh3QyxFQUE1QixDQUEzQjs7QUFLQSxJQUFJQyxtQkFBbUIsR0FBRyxpQ0FBNEI7QUFDbERKLEVBQUFBLFVBQVUsRUFBRUMseUJBRHNDO0FBRWxEQyxFQUFBQSxrQkFBa0IsRUFBRSxXQUY4QjtBQUdsREMsRUFBQUEsU0FBUyxFQUFFLElBSHVDLEVBQTVCLENBQTFCLEM7OztBQU1lLENBQUMsS0FBSyxFQUFOLEtBQWEsWUFBWTtBQUNwQyxNQUFJRSxLQUFLLEdBQUdDLDJCQUFaOzs7Ozs7QUFNQSxNQUFJQyxlQUFlLEdBQUc7QUFDbEIseUJBQVMsR0FBVCxFQUFjLEVBQUVDLEdBQUcsRUFBRSxFQUFFQyxJQUFJLEVBQUUsWUFBUixFQUFzQkMsRUFBRSxFQUFFLFlBQTFCLEVBQVAsRUFBZCxDQURrQjtBQUVsQjtBQUNJLEtBREo7QUFFSUwsRUFBQUEsS0FBSyxDQUFDTSxtQkFBTixDQUEwQkMsR0FGOUIsQ0FGa0I7O0FBTWxCLHdEQUE4QlAsS0FBOUIsQ0FOa0I7QUFPbEIsK0JBUGtCOzs7Ozs7OztBQWVsQiw0REFBMEIsRUFBRU0sbUJBQW1CLEVBQUVOLEtBQUssQ0FBQ00sbUJBQTdCLEVBQTFCLENBZmtCO0FBZ0JsQix1REFBcUIsRUFBRUEsbUJBQW1CLEVBQUVOLEtBQUssQ0FBQ00sbUJBQTdCLEVBQXJCLENBaEJrQjtBQWlCbEIseURBQXVCLEVBQUVBLG1CQUFtQixFQUFFTixLQUFLLENBQUNNLG1CQUE3QixFQUF2QixDQWpCa0IsQ0FBdEI7O0FBbUJBTixFQUFBQSxLQUFLLENBQUNRLGtCQUFOLENBQXlCTixlQUF6QjtBQUNBRixFQUFBQSxLQUFLLENBQUNTLGdCQUFOO0FBQ0gsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2aWV3cyBmcm9tICdrb2Etdmlld3MnXG5pbXBvcnQgYm9keVBhcnNlciBmcm9tICdrb2EtYm9keXBhcnNlcidcbmltcG9ydCB7IGRlZmF1bHQgYXMgQXBwbGljYXRpb24gfSBmcm9tICcuLi8uLi9BcHBsaWNhdGlvbi5jbGFzcy5qcydcbmltcG9ydCBPcGVuSWRDb25uZWN0Q2xhc3MgZnJvbSAnLi9PcGVuSWRDb25uZWN0LmNsYXNzLmpzJ1xuaW1wb3J0IGltcGxlbWVudE1pZGRsZXdhcmVPbk1vZHVsZVVzaW5nSnNvbiBmcm9tICcuLi8uLi8uLi91dGlsaXR5RnVuY3Rpb24vbWlkZGxld2FyZS9pbXBsZW1lbnRNaWRkbGV3YXJlT25Nb2R1bGVVc2luZ0pzb24uanMnIC8vIE1pZGRsZXdhcmUgZXh0ZW5kaW5nIHNlcnZlciBmdW5jdGlvbmFsaXR5XG5pbXBvcnQgaW1wbGVtZW50Q29uZGl0aW9uQWN0aW9uT25Nb2R1bGVVc2luZ0pzb24gZnJvbSAnLi4vLi4vLi4vdXRpbGl0eUZ1bmN0aW9uL21pZGRsZXdhcmUvaW1wbGVtZW50Q29uZGl0aW9uQWN0aW9uT25Nb2R1bGVVc2luZ0pzb24uanMnXG5pbXBvcnQgY3JlYXRlU3RhdGljSW5zdGFuY2VDbGFzc2VzIGZyb20gJy4uLy4uLy4uL21vZHVsZS9yZXVzYWJsZU5lc3RlZFVuaXQnXG5pbXBvcnQgY3JlYXRlQ2xhc3NJbnN0YW5jZVBlclJlcXVlc3QgZnJvbSAnLi4vLi4vLi4vdXRpbGl0eUZ1bmN0aW9uL21pZGRsZXdhcmUvY3JlYXRlQ2xhc3NJbnN0YW5jZVBlclJlcXVlc3QubWlkZGxld2FyZS5qcydcbmltcG9ydCBrb2FCb2R5UGFyc2VyIGZyb20gJ2tvYS1ib2R5UGFyc2VyJ1xuaW1wb3J0IGtvYU1vdW50IGZyb20gJ2tvYS1tb3VudCcgLy8gbW91bnQga29hIGFwcCBhcyBtaWRkbGV3YXJlIHRvIGFub3RoZXIga29hIGFwcFxuaW1wb3J0IGtvYVZpZXdzIGZyb20gJ2tvYS12aWV3cydcbmltcG9ydCB7IG9pZGNJbnRlcmFjdGlvbkVudHJ5cG9pbnQsIG9pZGNJbnRlcmFjdGlvbkxvZ2luLCBvaWRjSW50ZXJhY3Rpb25Db25maXJtIH0gZnJvbSAnLi4vLi4vLi4vdXRpbGl0eUZ1bmN0aW9uL21pZGRsZXdhcmUvb2lkY0ludGVyYWN0aW9uLm1pZGRsZXdhcmUuanMnXG5cbmxldCBNaWRkbGV3YXJlQ29udHJvbGxlciA9IGNyZWF0ZVN0YXRpY0luc3RhbmNlQ2xhc3Nlcyh7XG4gICAgU3VwZXJjbGFzczogQXBwbGljYXRpb24sIFxuICAgIGltcGxlbWVudGF0aW9uVHlwZTogJ01pZGRsZXdhcmUnLFxuICAgIGNhY2hlTmFtZTogdHJ1ZVxufSlcbmxldCBDb25kaXRpb25Db250cm9sbGVyID0gY3JlYXRlU3RhdGljSW5zdGFuY2VDbGFzc2VzKHtcbiAgICBTdXBlcmNsYXNzOiBBcHBsaWNhdGlvbiwgXG4gICAgaW1wbGVtZW50YXRpb25UeXBlOiAnQ29uZGl0aW9uJyxcbiAgICBjYWNoZU5hbWU6IHRydWVcbn0pXG5cbmV4cG9ydCBkZWZhdWx0ICh7fSA9IHt9KSA9PiBhc3luYyAoKSA9PiB7XG4gICAgbGV0IENsYXNzID0gT3BlbklkQ29ubmVjdENsYXNzXG4gICAgLyoqXG4gICAgICogQ2VhdGVzIGZvbGxvd2luZyByb3V0ZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9wYW52YS9ub2RlLW9pZGMtcHJvdmlkZXIvYmxvYi9tYXN0ZXIvbGliL2hlbHBlcnMvZGVmYXVsdHMuanMjTDIxMFxuICAgICAqIGFkZCBtaWRkbHdhcmUgdG8gdGhlIG9pZGMga29hIHNlcnZlciBhcnJheSBmb2xsb3dpbmcgaW5zdHJ1Y3Rpb25zIC0gaHR0cHM6Ly9naXRodWIuY29tL3BhbnZhL25vZGUtb2lkYy1wcm92aWRlci9ibG9iL21hc3Rlci9kb2NzL2NvbmZpZ3VyYXRpb24ubWQjcmVnaXN0ZXJpbmctbW9kdWxlLW1pZGRsZXdhcmVzLWhlbG1ldC1pcC1maWx0ZXJzLXJhdGUtbGltaXRlcnMtZXRjXG4gICAgICovXG4gICAgLy8gQ2xhc3Muc2VydmVyS29hLnVzZSgpXG4gICAgbGV0IG1pZGRsZXdhcmVBcnJheSA9IFtcbiAgICAgICAga29hVmlld3MoJy8nLCB7IG1hcDogeyBodG1sOiAndW5kZXJzY29yZScsIGpzOiAndW5kZXJzY29yZScgfSB9ICksIC8vIGFkZCBrb2Egdmlld3MgZm9yIGh0bWwgcmVuZGVyaW5nLlxuICAgICAgICBrb2FNb3VudCggLy8gbW91bnQgb2lkYyBrb2EgYXBwIGFzIG1pZGRsZXdhcmVzXG4gICAgICAgICAgICAnLycgLyogYmFzZSBwYXRoIHRvIG1vdW50IHRvICovLFxuICAgICAgICAgICAgQ2xhc3Mub3BlbklkQ29ubmVjdFNlcnZlci5hcHBcbiAgICAgICAgKSxcbiAgICAgICAgY3JlYXRlQ2xhc3NJbnN0YW5jZVBlclJlcXVlc3QoQ2xhc3MpLFxuICAgICAgICBrb2FCb2R5UGFyc2VyKCksXG4gICAgICAgIC8vIGFzeW5jIChjb250ZXh0LCBuZXh0KSA9PiB7XG4gICAgICAgIC8vICAgICAvLyBpbnN0YW5jZS5taWRkbGV3YXJlQXJyYXkucHVzaChtaWRkbGV3YXJlKVxuICAgICAgICAvLyAgICAgLy8gYXdhaXQgY29udGV4dC5yZXEuc2V0VGltZW91dCgwKTsgLy8gY2hhbmdlcyBkZWZhdWx0IE5vZGVqcyB0aW1lb3V0IChkZWZhdWx0IDEyMCBzZWNvbmRzKS4gICAgICAgICAgXG4gICAgICAgIC8vICAgICBhd2FpdCBjb250ZXh0LnNldCgnQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJywgJyonKVxuICAgICAgICAvLyAgICAgYXdhaXQgY29udGV4dC5zZXQoJ2Nvbm5lY3Rpb24nLCAna2VlcC1hbGl2ZScpXG4gICAgICAgIC8vICAgICBhd2FpdCBuZXh0KClcbiAgICAgICAgLy8gfSxcbiAgICAgICAgb2lkY0ludGVyYWN0aW9uRW50cnlwb2ludCh7IG9wZW5JZENvbm5lY3RTZXJ2ZXI6IENsYXNzLm9wZW5JZENvbm5lY3RTZXJ2ZXIgfSksXG4gICAgICAgIG9pZGNJbnRlcmFjdGlvbkxvZ2luKHsgb3BlbklkQ29ubmVjdFNlcnZlcjogQ2xhc3Mub3BlbklkQ29ubmVjdFNlcnZlciB9KSxcbiAgICAgICAgb2lkY0ludGVyYWN0aW9uQ29uZmlybSh7IG9wZW5JZENvbm5lY3RTZXJ2ZXI6IENsYXNzLm9wZW5JZENvbm5lY3RTZXJ2ZXIgfSksXG4gICAgXVxuICAgIENsYXNzLmFwcGx5S29hTWlkZGxld2FyZShtaWRkbGV3YXJlQXJyYXkpXG4gICAgQ2xhc3MuY3JlYXRlSHR0cFNlcnZlcigpXG59Il19