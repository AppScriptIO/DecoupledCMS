"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.oidcConfiguration = void 0;const oidcConfiguration = {

  features: {
    discovery: true,
    devInteractions: false,
    encryption: true,
    revocation: true,
    introspection: true,
    claimsParameter: true,
    clientCredentials: true,
    encryption: true,
    alwaysIssueRefresh: false,

    request: true,
    requestUri: true,
    oauthNativeApps: true,
    sessionManagement: true,
    backchannelLogout: false,
    frontchannelLogout: false,
    registration: true,
    registrationManagement: true,
    pkce: true },

  discovery: {
    claim_types_supported: ['normal', 'aggregated', 'distributed'] },

  routes: {

    authorization: '/auth',
    certificates: '/certs',
    check_session: '/session/check',
    end_session: '/session/end',
    introspection: '/token/introspection',
    registration: '/reg',
    revocation: '/token/revocation',
    token: '/token',
    userinfo: '/me' },


  scopes: [
  'openid',
  'offline_access'],

  claims: {
    scopeName: ['claim name', 'claim name2'],
    address: ['address'],
    email: ['email', 'email_verified'],
    phone: ['phone_number', 'phone_number_verified'],
    profile: ['birthdate', 'family_name', 'gender', 'given_name', 'locale', 'middle_name', 'name', 'nickname', 'picture', 'preferred_username', 'profile', 'updated_at', 'website', 'zoneinfo'] },



  async findById(context, id) {
    return {
      accountId: id,
      async claims(use, scope) {
        return {
          sub: id };

      } };

  },
  interactionUrl: function interactionUrl(ctx, interaction) {
    return `/interaction/${ctx.oidc.uuid}`;
  },
  interactionCheck: async function interactionCheck(ctx) {
    if (!ctx.oidc.session.sidFor(ctx.oidc.client.clientId)) {
      return {
        error: 'consent_required',
        error_description: 'client not authorized for End-User session yet',
        reason: 'client_not_authorized' };

    } else if (
    ctx.oidc.client.applicationType === 'native' &&
    ctx.oidc.params.response_type !== 'none' &&
    !ctx.oidc.result) {
      return {
        error: 'interaction_required',
        error_description: 'native clients require End-User interaction',
        reason: 'native_client_prompt' };

    }
    return false;
  } };exports.oidcConfiguration = oidcConfiguration;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,