"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _ApplicationClass = _interopRequireDefault(require("../../Application.class.js"));



var _http = _interopRequireDefault(require("http"));
var _decoratorUtility = require("@dependency/commonPattern/source/decoratorUtility.js");
var _extendedSubclassPattern = require("@dependency/commonPattern/source/extendedSubclassPattern.js");
var _oidcProvider = _interopRequireDefault(require("oidc-provider"));

var _memory_adapter = _interopRequireDefault(require("oidc-provider/lib/adapters/memory_adapter.js"));
var _oidcConfiguration = require("./oidcConfiguration.js");
var _clientApplication = require("./clientApplication.js");
var _keystore = _interopRequireDefault(require("./key/keystore.json"));var _dec, _dec2, _class, _class2, _temp;

const self = (_dec =
(0, _decoratorUtility.execute)({ staticMethod: 'initializeStaticClass' }), _dec2 =
_extendedSubclassPattern.extendedSubclassPattern.Subclass(), _dec(_class = _dec2(_class = (_temp = _class2 = class
OpenIdConnect extends _ApplicationClass.default {













  static async initializeStaticClass(self) {
    super.initializeStaticClass();
    self.port = 8084;




    self.OpenIdConnectServer = _oidcProvider.default;
    self.openIdConnectServer = new _oidcProvider.default(
    `${_ApplicationClass.default.config.PROTOCOL}${_ApplicationClass.default.config.HOST}:${self.port}`,
    _oidcConfiguration.oidcConfiguration);

    await self.openIdConnectServer.initialize({
      clients: _clientApplication.clientArray,
      adapter: _memory_adapter.default,
      keystore: _keystore.default }).
    catch(error => {throw error;});
    const oidcKoaServer = self.openIdConnectServer.app;






    self.serverKoa.proxy = true;








  }
  constructor(skipConstructor = false) {
    super(true);this.middlewareArray = [];
    this.config = {};
    if (skipConstructor) return;


  }

  static createHttpServer() {
    const self = this;
    self.createdHttpServer = _http.default.createServer(self.serverKoa.callback()).
    listen(self.port, () => {
      console.log(`â˜•%c ${self.name} listening on port ${self.port}`, self.config.style.green);


      if (process.send !== undefined) {
        if (self.config.DEPLOYMENT == 'development') process.send({ message: 'Server listening' });
      }
    });

  }}, _class2.entrypointSetting = { defaultConditionTreeKey: '' }, _class2.middlewareArray = [], _temp)) || _class) || _class);var _default =



self;exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,