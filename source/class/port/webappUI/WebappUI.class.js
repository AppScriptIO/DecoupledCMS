"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _ApplicationClass = _interopRequireDefault(require("../../Application.class.js"));
var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));
var _https = _interopRequireDefault(require("https"));
var _http = _interopRequireDefault(require("http"));
var _decoratorUtility = require("@dependency/commonPattern/source/decoratorUtility.js");
var _extendedSubclassPattern = require("@dependency/commonPattern/source/extendedSubclassPattern.js");var _dec, _dec2, _class, _class2, _temp;

const self = (_dec =
(0, _decoratorUtility.execute)({ staticMethod: 'initializeStaticClass' }), _dec2 =
_extendedSubclassPattern.extendedSubclassPattern.Subclass(), _dec(_class = _dec2(_class = (_temp = _class2 = class
WebappUI extends _ApplicationClass.default {










  static initializeStaticClass(self) {
    super.initializeStaticClass();
    self.port = 80;
  }
  constructor(skipConstructor = false) {
    super(true);this.middlewareArray = [];
    this.config = {};
    if (skipConstructor) return;


  }














































  static createHttpServer() {
    const self = this;
    self.createdHttpServer = _http.default.createServer(self.serverKoa.callback()).listen(self.port, () => {
      console.log(`☕%c ${self.name} listening on port ${self.port}`, self.config.style.green);


      if (process.send !== undefined) {

        if (self.config.DEPLOYMENT == 'development') process.send({ message: 'Server listening' });
      }
    });


    if (self.config.ssl) {
      let options = {
        key: _fs.default.readFileSync(_path.default.join(__dirname, '/sampleSSL/server.key')),
        cert: _fs.default.readFileSync(_path.default.join(__dirname, './sampleSSL/server.crt')) };

      self.createdHttpServer = _https.default.
      createServer(options, self.serverKoa.callback()).
      on('connection', socket => {
        socket.setTimeout(120);
      }).
      listen(443, () => {
        console.log(`☕%c ${self.name} listening on port 443`, self.config.style.green);
      });
    }
  }}, _class2.entrypointSetting = { defaultConditionTreeKey: 'default' }, _class2.middlewareArray = [], _temp)) || _class) || _class);var _default =


self;exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,