"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _ApplicationClass = _interopRequireDefault(require("../../Application.class.js"));
var _rethinkdb = _interopRequireDefault(require("rethinkdb"));
var _getTableDocumentAndFilterQuery = _interopRequireDefault(require("@dependency/databaseUtility/source/getTableDocumentAndFilter.query.js"));

let getTableDocument = {
  generate: _getTableDocumentAndFilterQuery.default,
  instance: [] };

getTableDocument.instance['oAuth_token'] = getTableDocument.generate('oAuth_token');
getTableDocument.instance['oAuth_client'] = getTableDocument.generate('oAuth_client');
getTableDocument.instance['oAuth_user'] = getTableDocument.generate('oAuth_user');var _default =


{




  generateAccessToken: undefined,
  generateRefreshToken: undefined,
  generateAuthorizationCode: undefined,
  getUserFromClient: undefined,


















  getUser: async (userId, userPassword) => {
    console.log('getUser function');
    const connection = _ApplicationClass.default.rethinkdbConnection;
    let dbFilterObject = { key: userId, password: userPassword };
    let user = await getTableDocument.instance['oAuth_user'](connection, dbFilterObject);

    return {
      username: user.key,
      password: user.password };

  },












  getClient: async (clientId, clientSecret) => {
    console.log('getClient function');

    const connection = _ApplicationClass.default.rethinkdbConnection;
    let dbFilterObject = clientSecret ? { key: clientId, clientSecret: clientSecret } : { key: clientId };
    let client = await getTableDocument.instance['oAuth_client'](connection, dbFilterObject);
    if (!client) return null;

    return {
      id: client.key,
      redirectUris: [client.redirectUri],
      grants: client.grantType };




  },












  getAccessToken: async accessToken => {
    console.log('getAccessToken function');

    const connection = _ApplicationClass.default.rethinkdbConnection;
    let tokenData = await getTableDocument.instance['oAuth_token'](connection, { type: 'accessToken', token: accessToken });
    if (!tokenData) return null;
    let client = await getTableDocument.instance['oAuth_client'](connection, { key: tokenData.clientId });
    let user = await getTableDocument.instance['oAuth_user'](connection, { key: tokenData.userId });

    return {
      accessToken: tokenData.token,
      accessTokenExpiresAt: tokenData.expiresAt,
      scope: tokenData.scope,
      client: Object.assign(client, { id: client.key }),
      user: {
        username: user.key } };


  },














  getRefreshToken: async refreshToken => {
    console.log('getRefreshToken function');

    const connection = _ApplicationClass.default.rethinkdbConnection;
    let tokenData = await getTableDocument.instance['oAuth_token'](connection, { type: 'refreshToken', token: refreshToken });
    if (!tokenData) return null;
    let client = await getTableDocument.instance['oAuth_client'](connection, { key: tokenData.clientId });
    let user = await getTableDocument.instance['oAuth_user'](connection, { key: tokenData.userId });

    return {
      refreshToken: tokenData.token,
      refreshTokenExpiresAt: tokenData.expiresAt,
      scope: tokenData.scope,
      client: Object.assign(client, { id: client.key }),
      user: {
        username: user.key } };


  },














  getAuthorizationCode: async authorizationCode => {
    console.log('getAuthorizationCode function');

    const connection = _ApplicationClass.default.rethinkdbConnection;
    let tokenData = await getTableDocument.instance['oAuth_token'](connection, { type: 'authorizationCode', token: authorizationCode });
    if (!tokenData) return null;
    let client = await getTableDocument.instance['oAuth_client'](connection, { key: tokenData.clientId });
    let user = await getTableDocument.instance['oAuth_user'](connection, { key: tokenData.userId });

    return {
      code: tokenData.token,
      expiresAt: tokenData.expiresAt,
      redirectUri: tokenData.redirectUri,
      scope: tokenData.scope,
      client: Object.assign(client, { id: client.key }),
      user: {
        username: user.key } };


  },














  saveToken: async (token, client, user) => {
    console.log('saveToken function');
    let userId = user.username;


    const connection = _ApplicationClass.default.rethinkdbConnection;
    let returnedValue = {
      scope: token.scope,
      client: client,
      user: user };


    if (token.accessToken) {
      await _rethinkdb.default.db('webappSetting').table('oAuth_token').insert({
        token: token.accessToken,
        expiresAt: token.accessTokenExpiresAt,
        scope: token.scope,
        clientId: client.id,
        type: 'accessToken',
        userId: userId }).
      run(connection);
    }

    if (token.refreshToken) {
      await _rethinkdb.default.db('webappSetting').table('oAuth_token').insert({
        token: token.refreshToken,
        expiresAt: token.refreshTokenExpiresAt,
        scope: token.scope,
        clientId: client.id,
        userId: userId,
        type: 'refreshToken' }).
      run(connection);
    }

    Object.assign(returnedValue, {
      refreshToken: token.refreshToken,
      refreshTokenExpiresAt: token.refreshTokenExpiresAt,
      accessToken: token.accessToken,
      accessTokenExpiresAt: token.accessTokenExpiresAt });


    return returnedValue;
  },














  saveAuthorizationCode: async (code, client, user) => {
    console.log('saveAuthorizationCode function');

    let userId = user.username;
    const connection = _ApplicationClass.default.rethinkdbConnection;

    await _rethinkdb.default.db('webappSetting').table('oAuth_token').insert({
      type: 'authorizationCode',
      token: code.authorizationCode,
      expiresAt: code.expiresAt,
      redirectUri: code.redirectUri,
      scope: code.scope,
      clientId: client.id,
      userId: userId }).
    run(connection);

    return {
      authorizationCode: code.authorizationCode,
      expiresAt: code.expiresAt,
      redirectUri: code.redirectUri,
      scope: code.scope,
      client: client,
      user: user };

  },















  revokeToken: async token => {
    console.log('revokeToken function');

    const connection = _ApplicationClass.default.rethinkdbConnection;
    let filterObject = { token: token.refreshToken };
    let { deleted: deletionResult } = await _rethinkdb.default.db('webappSetting').table('oAuth_token').filter(filterObject).delete().run(connection);
    return deletionResult ? true : false;
  },














  revokeAuthorizationCode: async code => {
    console.log('revokeAuthorizationCode function');

    const connection = _ApplicationClass.default.rethinkdbConnection;
    let filterObject = { token: code.code };
    let { deleted: deletionResult } = await _rethinkdb.default.db('webappSetting').table('oAuth_token').filter(filterObject).delete().run(connection);
    return deletionResult ? true : false;
  },












  validateScope: async (user, client, scope) => {
    console.log('validateScope function');
    if (!scope) return null;
    const connection = _ApplicationClass.default.rethinkdbConnection;
    let dbFilterObject = { key: client.id };
    client = await getTableDocument.instance['oAuth_client'](connection, dbFilterObject);
    if (!client || !client.scope) return null;
    let validScopes = client.scope.split(',').map(s => s.trim());
    let scopes = scope.split(',').map(s => s.trim()).filter(s => validScopes.indexOf(s) >= 0);
    return scope.length ? scopes.join(',') : null;
  },














  verifyScope: async (accessToken, scope) => {
    console.log('verifyScope function');


    if (!scope) return true;
    if (!accessToken.scope) return false;
    validScopes = scope.split(',').map(s => s.trim());
    scopes = accessToken.scope.split(',').map(s => s.trim());

    return scopes.some(s => validScopes.indexOf(s) >= 0);
  } };exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,