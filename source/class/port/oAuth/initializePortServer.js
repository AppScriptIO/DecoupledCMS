"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _koaViews = _interopRequireDefault(require("koa-views"));
var _koaBodyparser = _interopRequireDefault(require("koa-bodyparser"));
var _ApplicationClass = _interopRequireDefault(require("../../Application.class.js"));
var _OAuthClass = _interopRequireDefault(require("./OAuth.class.js"));
var _implementMiddlewareOnModuleUsingJson = _interopRequireDefault(require("../../../utilityFunction/middleware/implementMiddlewareOnModuleUsingJson.js"));
var _implementConditionActionOnModuleUsingJson = _interopRequireDefault(require("../../../utilityFunction/middleware/implementConditionActionOnModuleUsingJson.js"));
var _reusableNestedUnit = _interopRequireDefault(require("../../../module/reusableNestedUnit"));
var _createClassInstancePerRequestMiddleware = _interopRequireDefault(require("../../../utilityFunction/middleware/createClassInstancePerRequest.middleware.js"));

let MiddlewareController = (0, _reusableNestedUnit.default)({
  Superclass: _ApplicationClass.default,
  implementationType: 'Middleware',
  cacheName: true });

let ConditionController = (0, _reusableNestedUnit.default)({
  Superclass: _ApplicationClass.default,
  implementationType: 'Condition',
  cacheName: true });var _default =


({} = {}) => async () => {
  let Class = _OAuthClass.default;

  Class.serverKoa.use((0, _koaViews.default)('/', { map: { html: 'underscore', js: 'underscore' } }));
  let middlewareArray = [
  (0, _createClassInstancePerRequestMiddleware.default)(Class),
  (0, _koaBodyparser.default)(),
  async (context, next) => {


    await context.set('Access-Control-Allow-Origin', '*');
    await context.set('connection', 'keep-alive');
    await next();
  },
  async (context, next) => {


    let middlewareController = await MiddlewareController.createContext({ portAppInstance: context.instance });
    let middlewareArray = await middlewareController.initializeNestedUnit({ nestedUnitKey: 'd908335b-b60a-4a00-8c33-b9bc4a9c64ec' });
    await (0, _implementMiddlewareOnModuleUsingJson.default)(middlewareArray)(context, next);



  },
  async (context, next) => {
    let self = Class;


    let conditionController = await ConditionController.createContext({ portAppInstance: context.instance });

    let entrypointConditionTree = '0681f25c-4c00-4295-b12a-6ab81a3cb440';
    if (process.env.SZN_DEBUG == 'true' && context.header.debug == 'true') console.log(`🍊 Entrypoint Condition Key: ${entrypointConditionTree} \n \n`);
    let callback = await conditionController.initializeNestedUnit({ nestedUnitKey: entrypointConditionTree });
    if (process.env.SZN_DEBUG == 'true' && context.header.debug == 'true') console.log(`🔀✔️ Choosen callback is: %c ${callback.name}`, self.config.style.green);

    await (0, _implementConditionActionOnModuleUsingJson.default)({ setting: callback })(context, next);

    if (callback && callback.name == 'post') {
      let x = await Class.authenticate(context.request, context.response);
      if (x) await next();
    }
  },
  async (context, next) => {
    context.status = 404;

    await next();
  }];

  Class.applyKoaMiddleware(middlewareArray);
  Class.createHttpServer();
};exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,