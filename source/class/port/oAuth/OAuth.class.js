"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _ApplicationClass = _interopRequireDefault(require("../../Application.class.js"));



var _http = _interopRequireDefault(require("http"));
var _oauth2Server = _interopRequireDefault(require("oauth2-server"));
var _oAuth2ServerModel = _interopRequireDefault(require("./oAuth2Server.model.js"));


var _decoratorUtility = require("@dependency/commonPattern/source/decoratorUtility.js");
var _extendedSubclassPattern = require("@dependency/commonPattern/source/extendedSubclassPattern.js");var _dec, _dec2, _class, _class2, _temp;let Request = _oauth2Server.default.Request;let Response = _oauth2Server.default.Response;




const self = (_dec =
(0, _decoratorUtility.execute)({ staticMethod: 'initializeStaticClass' }), _dec2 =
_extendedSubclassPattern.extendedSubclassPattern.Subclass(), _dec(_class = _dec2(_class = (_temp = _class2 = class
OAuth extends _ApplicationClass.default {












  static initializeStaticClass(self) {
    super.initializeStaticClass();
    self.port = 8088;




    self.OAuth2Server = _oauth2Server.default;
    self.oAuth2Server = new _oauth2Server.default({
      debug: true,



      model: _oAuth2ServerModel.default });

  }
  constructor(skipConstructor = false) {
    super(true);this.middlewareArray = [];
    this.config = {};
    if (skipConstructor) return;


  }

  static createHttpServer() {
    const self = this;
    self.createdHttpServer = _http.default.createServer(self.serverKoa.callback()).listen(self.port, () => {
      console.log(`â˜•%c ${self.name} listening on port ${self.port}`, self.config.style.green);


      if (process.send !== undefined) {

        if (self.config.DEPLOYMENT == 'development') process.send({ message: 'Server listening' });
      }
    });

  }






  static authenticateMiddleware() {
    return async (request, response) => {
      console.log('authenticate function');

      let options = {
        scope: undefined,
        addAcceptedScopesHeader: true,
        addAuthorizedScopesHeader: true,
        allowBearerTokensInQueryString: false };

      let oAuthRequest = new Request(request);
      let oAuthResponse = new Response(response);
      let tokenData = await self.oAuth2Server.authenticate(oAuthRequest, oAuthResponse, options).catch(error => {
        console.log(error);
      });
      return tokenData;
    };
  }








  async authorize(request, response) {
    console.log('authorize function');

    let options = {
      authenticateHandler: {
        handle: data => {


          return { username: 'example' };
        } },

      authorizationCodeLifetime: 300 };


    let oAuthRequest = new Request(request);
    let oAuthResponse = new Response(response);
    let authorizationCode = await self.oAuth2Server.authorize(oAuthRequest, oAuthResponse, options).catch(error => {
      console.log(error);
    });
    return authorizationCode;
  }







  async token(request, response) {
    console.log('token function');
    let options = {
      accessTokenLifetime: 3600,
      refreshTokenLifetime: 1209600,
      allowExtendedTokenAttributes: true,
      alwaysIssueNewRefreshToken: false,
      requireClientAuthentication: {

        password: false,
        authorization_code: true,
        client_credentials: true,
        refresh_token: false } };



    let oAuthRequest = new Request(request);
    let oAuthResponse = new Response(response);
    let tokenData = await self.oAuth2Server.token(oAuthRequest, oAuthResponse, options).catch(error => {
      console.log('token function:' + error);
    });
    return tokenData;
  }}, _class2.entrypointSetting = { defaultConditionTreeKey: 'XYZ' }, _class2.middlewareArray = [], _temp)) || _class) || _class);var _default =


self;exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,