"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.instance = exports.default = void 0;var _http = _interopRequireDefault(require("http"));
var _assert = _interopRequireDefault(require("assert"));
var _path = _interopRequireDefault(require("path"));
var _fs = _interopRequireDefault(require("fs"));
var _events = _interopRequireDefault(require("events"));
var _configurationExport = _interopRequireDefault(require("../../setup/configuration/configuration.export.js"));
var _koa = _interopRequireDefault(require("koa"));


var _commonDatabaseFunctionality = require("../utilityFunction/middleware/commonDatabaseFunctionality.js");
var _decoratorUtility = require("@dependency/commonPattern/source/decoratorUtility.js");
var _addStaticSubclassToClassArray = _interopRequireDefault(require("@dependency/commonPattern/source/addStaticSubclassToClassArray.staticMethod"));
var _extendedSubclassPattern = require("@dependency/commonPattern/source/extendedSubclassPattern.js");
var _underscore = _interopRequireDefault(require("underscore"));
var _getTableDocumentQuery = _interopRequireDefault(require("@dependency/databaseUtility/source/getTableDocument.query.js"));var _dec, _dec2, _class, _class2, _temp;


const self = (_dec =
(0, _decoratorUtility.add)(
{ to: 'static' },
{
  addStaticSubclassToClassArray: _addStaticSubclassToClassArray.default }), _dec2 =


_extendedSubclassPattern.extendedSubclassPattern.Superclass(), _dec(_class = _dec2(_class = (_temp = _class2 = class
Application extends _events.default {







  static async initialize() {

    console.info(`☕%c Running Application as ${self.config.DEPLOYMENT} - '${self.config.PROTOCOL}${self.config.HOST}'`, self.config.style.green);
    _assert.default.notStrictEqual(self.config.HOST, undefined);

    self.rethinkdbConnection = await (0, _commonDatabaseFunctionality.connect)();




    let underscorePath = require.resolve('underscore');
    let appLevelUnderscorePath = _path.default.resolve(__dirname, '../../../node_modules/underscore/underscore.js');
    if (_fs.default.existsSync(appLevelUnderscorePath) && underscorePath !== appLevelUnderscorePath) {

      console.log(`• Underscore template - Found multiple underscore installations, Using appscript local underscore instance (module in lower hierarchy) i.e. ${underscorePath}.`);


    } else {

      console.log(`• Underscore template - Found a single installation of underscore, using ${underscorePath}.`);

    }

    _underscore.default.templateSettings = {

      evaluate: /\{\%(.+?)\%\}/g,
      interpolate: /\{\%=(.+?)\%\}/g,
      escape: /\{\%-(.+?)\%\}/g };

    console.info(`• Underscore template setting set as ${_underscore.default.templateSettings.evaluate} ${_underscore.default.templateSettings.interpolate} ${_underscore.default.templateSettings.escape}`);

    await self.eventEmitter.emit('initializationEnd');
    await self.eventEmitter.emit('addSubclass');
    await self.loadFrontendData();


    console.log('• App up & running !');
  }



  static initializeStaticClass() {

    let self = this;
    self.serverKoa = self.createKoaServer();
  }

  static async applyKoaMiddleware(middlewareArray = false) {
    const self = this;
    if (middlewareArray) self.middlewareArray = middlewareArray;
    await self.middlewareArray.forEach(middleware => {
      self.serverKoa.use(middleware);
    }, this);
  }

  static createKoaServer() {
    let serverKoa = new _koa.default();
    if (self.config.DEPLOYMENT == 'development') serverKoa.subdomainOffset = 1;
    return serverKoa;
  }

  static createHttpServer() {
    return new Promise((resolve, reject) => {
      const self = this;
      self.httpServer = _http.default.createServer(self.serverKoa.callback());










      self.httpServer.listen(self.port, () => {
        console.log(`☕%c ${self.name} listening on port ${self.port}`, self.config.style.green);
        resolve();
      });
    });
  }

  static async loadFrontendData() {
    let getTableDocument = {
      generate: _getTableDocumentQuery.default,
      instance: [] };

    getTableDocument.instance['template_documentFrontend'] = await getTableDocument.generate('webappSetting', 'template_documentFrontend');
    const documentFrontendData = await getTableDocument.instance['template_documentFrontend'](self.rethinkdbConnection);
    let defaultLanguage = 'English';





    self.frontendStatic = {

      config: self.config,
      setting: {
        location: {
          routeBasePath: `${self.config.PROTOCOL}${self.config.HOST}`,
          cdnBasePath: self.extendedSubclass.static['StaticContent'].url },

        mode: {

          language: defaultLanguage } },


      route: 'route',
      document: documentFrontendData };


  }}, _class2.rethinkdbConnection = {}, _class2.config = _configurationExport.default, _temp)) || _class) || _class);exports.default = self;

const instance = new self();exports.instance = instance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,