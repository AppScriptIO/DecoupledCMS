"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.transformJavascript = void 0;var _configurationExport = _interopRequireDefault(require("../../../configuration/configuration/configuration.export.js"));
var _path = _interopRequireDefault(require("path"));

var _stream = _interopRequireDefault(require("stream"));
var _middlewarePatternDecorator = require("../middlewarePatternDecorator.js");
var _streamToStringConvertion = require("../streamToStringConvertion.js");

let babel, nativeClientSideRuntimeCompilerConfig;
if (Application.config.DEPLOYMENT == 'development') {

  babel = require('/project/application/dependency/appDeploymentLifecycle/babel_javascriptTranspilation.js/node_modules/@babel/core');
  nativeClientSideRuntimeCompilerConfig = require(_path.default.normalize(
  `${_configurationExport.default.directory.appDeploymentLifecyclePath}/babel_javascriptTranspilation.js/compilerConfiguration/nativeClientSideRuntime.BabelConfig.js`));

}

let transformJavascript = (0, _middlewarePatternDecorator.functionWrappedMiddlewareDecorator)(async function (context, next, option) {

  if (Application.config.DEPLOYMENT == 'development' && !Application.config.DISTRIBUTION && context.response.type == 'application/javascript') {
    let path = context.path;
    let scriptCode = context.body;
    let transformBabelPlugin = [];


    if (path.includes('webcomponent/@package')) transformBabelPlugin = nativeClientSideRuntimeCompilerConfig.plugins;else

      transformBabelPlugin = nativeClientSideRuntimeCompilerConfig.plugins;

    let transformBabelPreset = nativeClientSideRuntimeCompilerConfig.presets;

    if (transformBabelPlugin.length) {

      if (scriptCode instanceof _stream.default.Stream) scriptCode = await (0, _streamToStringConvertion.streamToString)(scriptCode);

      let transformedObject = babel.transformSync(scriptCode, { presets: transformBabelPreset, plugins: transformBabelPlugin });
      context.body = transformedObject.code;
    }
  }
  await next();
});exports.transformJavascript = transformJavascript;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NvdXJjZS9taWRkbGV3YXJlL2RlcHJlY2F0ZWQvYmFiZWxUcmFuc3BpbGVyLm1pZGRsZXdhcmUuanMiXSwibmFtZXMiOlsiYmFiZWwiLCJuYXRpdmVDbGllbnRTaWRlUnVudGltZUNvbXBpbGVyQ29uZmlnIiwiQXBwbGljYXRpb24iLCJjb25maWciLCJERVBMT1lNRU5UIiwicmVxdWlyZSIsInBhdGgiLCJub3JtYWxpemUiLCJkaXJlY3RvcnkiLCJhcHBEZXBsb3ltZW50TGlmZWN5Y2xlUGF0aCIsInRyYW5zZm9ybUphdmFzY3JpcHQiLCJjb250ZXh0IiwibmV4dCIsIm9wdGlvbiIsIkRJU1RSSUJVVElPTiIsInJlc3BvbnNlIiwidHlwZSIsInNjcmlwdENvZGUiLCJib2R5IiwidHJhbnNmb3JtQmFiZWxQbHVnaW4iLCJpbmNsdWRlcyIsInBsdWdpbnMiLCJ0cmFuc2Zvcm1CYWJlbFByZXNldCIsInByZXNldHMiLCJsZW5ndGgiLCJzdHJlYW0iLCJTdHJlYW0iLCJ0cmFuc2Zvcm1lZE9iamVjdCIsInRyYW5zZm9ybVN5bmMiLCJjb2RlIl0sIm1hcHBpbmdzIjoicU1BQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSUEsS0FBSixFQUFXQyxxQ0FBWDtBQUNBLElBQUlDLFdBQVcsQ0FBQ0MsTUFBWixDQUFtQkMsVUFBbkIsSUFBaUMsYUFBckMsRUFBb0Q7O0FBRWxESixFQUFBQSxLQUFLLEdBQUdLLE9BQU8sQ0FBQyxrSEFBRCxDQUFmO0FBQ0FKLEVBQUFBLHFDQUFxQyxHQUFHSSxPQUFPLENBQUNDLGNBQUtDLFNBQUw7QUFDN0MsS0FBRUosNkJBQU9LLFNBQVAsQ0FBaUJDLDBCQUEyQixnR0FERCxDQUFELENBQS9DOztBQUdEOztBQUVNLElBQUlDLG1CQUFtQixHQUFHLG9FQUFtQyxnQkFBZUMsT0FBZixFQUF3QkMsSUFBeEIsRUFBOEJDLE1BQTlCLEVBQXNDOztBQUV4RyxNQUFJWCxXQUFXLENBQUNDLE1BQVosQ0FBbUJDLFVBQW5CLElBQWlDLGFBQWpDLElBQWtELENBQUNGLFdBQVcsQ0FBQ0MsTUFBWixDQUFtQlcsWUFBdEUsSUFBc0ZILE9BQU8sQ0FBQ0ksUUFBUixDQUFpQkMsSUFBakIsSUFBeUIsd0JBQW5ILEVBQTZJO0FBQzNJLFFBQUlWLElBQUksR0FBR0ssT0FBTyxDQUFDTCxJQUFuQjtBQUNBLFFBQUlXLFVBQVUsR0FBR04sT0FBTyxDQUFDTyxJQUF6QjtBQUNBLFFBQUlDLG9CQUFvQixHQUFHLEVBQTNCOzs7QUFHQSxRQUFJYixJQUFJLENBQUNjLFFBQUwsQ0FBYyx1QkFBZCxDQUFKLEVBQTRDRCxvQkFBb0IsR0FBR2xCLHFDQUFxQyxDQUFDb0IsT0FBN0QsQ0FBNUM7O0FBRUtGLE1BQUFBLG9CQUFvQixHQUFHbEIscUNBQXFDLENBQUNvQixPQUE3RDs7QUFFTCxRQUFJQyxvQkFBb0IsR0FBR3JCLHFDQUFxQyxDQUFDc0IsT0FBakU7O0FBRUEsUUFBSUosb0JBQW9CLENBQUNLLE1BQXpCLEVBQWlDOztBQUUvQixVQUFJUCxVQUFVLFlBQVlRLGdCQUFPQyxNQUFqQyxFQUF5Q1QsVUFBVSxHQUFHLE1BQU0sOENBQWVBLFVBQWYsQ0FBbkI7O0FBRXpDLFVBQUlVLGlCQUFpQixHQUFHM0IsS0FBSyxDQUFDNEIsYUFBTixDQUFvQlgsVUFBcEIsRUFBZ0MsRUFBRU0sT0FBTyxFQUFFRCxvQkFBWCxFQUFpQ0QsT0FBTyxFQUFFRixvQkFBMUMsRUFBaEMsQ0FBeEI7QUFDQVIsTUFBQUEsT0FBTyxDQUFDTyxJQUFSLEdBQWVTLGlCQUFpQixDQUFDRSxJQUFqQztBQUNEO0FBQ0Y7QUFDRCxRQUFNakIsSUFBSSxFQUFWO0FBQ0QsQ0F2QmdDLENBQTFCLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29uZmlnIGZyb20gJy4uLy4uLy4uL2NvbmZpZ3VyYXRpb24vY29uZmlndXJhdGlvbi9jb25maWd1cmF0aW9uLmV4cG9ydC5qcydcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgZmlsZXN5c3RlbSBmcm9tICdmcydcbmltcG9ydCBzdHJlYW0gZnJvbSAnc3RyZWFtJ1xuaW1wb3J0IHsgZnVuY3Rpb25XcmFwcGVkTWlkZGxld2FyZURlY29yYXRvciB9IGZyb20gJy4uL21pZGRsZXdhcmVQYXR0ZXJuRGVjb3JhdG9yLmpzJ1xuaW1wb3J0IHsgc3RyZWFtVG9TdHJpbmcgfSBmcm9tICcuLi9zdHJlYW1Ub1N0cmluZ0NvbnZlcnRpb24uanMnXG5cbmxldCBiYWJlbCwgbmF0aXZlQ2xpZW50U2lkZVJ1bnRpbWVDb21waWxlckNvbmZpZ1xuaWYgKEFwcGxpY2F0aW9uLmNvbmZpZy5ERVBMT1lNRU5UID09ICdkZXZlbG9wbWVudCcpIHtcbiAgLy8gYXMgaW4gcHJvZHVjdGlvbiBhcHBEZXBsb3ltZW50TGlmZWN5Y2xlIGRlcGVuZGVuY3kgZG9lc24ndCBleGlzdC5cbiAgYmFiZWwgPSByZXF1aXJlKCcvcHJvamVjdC9hcHBsaWNhdGlvbi9kZXBlbmRlbmN5L2FwcERlcGxveW1lbnRMaWZlY3ljbGUvYmFiZWxfamF2YXNjcmlwdFRyYW5zcGlsYXRpb24uanMvbm9kZV9tb2R1bGVzL0BiYWJlbC9jb3JlJylcbiAgbmF0aXZlQ2xpZW50U2lkZVJ1bnRpbWVDb21waWxlckNvbmZpZyA9IHJlcXVpcmUocGF0aC5ub3JtYWxpemUoXG4gICAgYCR7Y29uZmlnLmRpcmVjdG9yeS5hcHBEZXBsb3ltZW50TGlmZWN5Y2xlUGF0aH0vYmFiZWxfamF2YXNjcmlwdFRyYW5zcGlsYXRpb24uanMvY29tcGlsZXJDb25maWd1cmF0aW9uL25hdGl2ZUNsaWVudFNpZGVSdW50aW1lLkJhYmVsQ29uZmlnLmpzYCxcbiAgKSlcbn1cblxuZXhwb3J0IGxldCB0cmFuc2Zvcm1KYXZhc2NyaXB0ID0gZnVuY3Rpb25XcmFwcGVkTWlkZGxld2FyZURlY29yYXRvcihhc3luYyBmdW5jdGlvbihjb250ZXh0LCBuZXh0LCBvcHRpb24pIHtcbiAgLy8gdHJhbnNwaWxlIG9ubHkgb24gZGV2ZWxvcG1lbnQgYW5kIG5vbi1kaXN0cmlidXRpb24gZm9sZGVycywgaS5lLiBvbi10aGUtZmx5IHRyYW5zcGlsYXRpb24gaXMgZXhlY3V0ZWQgb25seSBpbiBkZXZlbG9wbWVudCwgd2hpbGUgcHJvZHVjdGlvbiBhbmQgZGlzdHJpYnV0aW9uIHNob3VsZCBiZSBhbHJlYWR5IHRyYW5zcGlsZWQuXG4gIGlmIChBcHBsaWNhdGlvbi5jb25maWcuREVQTE9ZTUVOVCA9PSAnZGV2ZWxvcG1lbnQnICYmICFBcHBsaWNhdGlvbi5jb25maWcuRElTVFJJQlVUSU9OICYmIGNvbnRleHQucmVzcG9uc2UudHlwZSA9PSAnYXBwbGljYXRpb24vamF2YXNjcmlwdCcpIHtcbiAgICBsZXQgcGF0aCA9IGNvbnRleHQucGF0aFxuICAgIGxldCBzY3JpcHRDb2RlID0gY29udGV4dC5ib2R5XG4gICAgbGV0IHRyYW5zZm9ybUJhYmVsUGx1Z2luID0gW11cblxuICAgIC8vIGluIGNhc2UgYW4gbnBtIHdlYmNvbXBvbmVudCBwYWNrYWdlXG4gICAgaWYgKHBhdGguaW5jbHVkZXMoJ3dlYmNvbXBvbmVudC9AcGFja2FnZScpKSB0cmFuc2Zvcm1CYWJlbFBsdWdpbiA9IG5hdGl2ZUNsaWVudFNpZGVSdW50aW1lQ29tcGlsZXJDb25maWcucGx1Z2luc1xuICAgIC8vIGluIGNhc2UgYSBjdXN0b20gcHJvamVjdCBlbGVtZW50XG4gICAgZWxzZSB0cmFuc2Zvcm1CYWJlbFBsdWdpbiA9IG5hdGl2ZUNsaWVudFNpZGVSdW50aW1lQ29tcGlsZXJDb25maWcucGx1Z2luc1xuXG4gICAgbGV0IHRyYW5zZm9ybUJhYmVsUHJlc2V0ID0gbmF0aXZlQ2xpZW50U2lkZVJ1bnRpbWVDb21waWxlckNvbmZpZy5wcmVzZXRzXG5cbiAgICBpZiAodHJhbnNmb3JtQmFiZWxQbHVnaW4ubGVuZ3RoKSB7XG4gICAgICAvLyBjb252ZXJ0IHN0cmVhbSBpbnRvIHN0cmluZ1xuICAgICAgaWYgKHNjcmlwdENvZGUgaW5zdGFuY2VvZiBzdHJlYW0uU3RyZWFtKSBzY3JpcHRDb2RlID0gYXdhaXQgc3RyZWFtVG9TdHJpbmcoc2NyaXB0Q29kZSlcbiAgICAgIC8vIHRyYW5zZm9ybSBjb2RlIHVzaW5nIGFycmF5IG9mIHBsdWdpbnMuXG4gICAgICBsZXQgdHJhbnNmb3JtZWRPYmplY3QgPSBiYWJlbC50cmFuc2Zvcm1TeW5jKHNjcmlwdENvZGUsIHsgcHJlc2V0czogdHJhbnNmb3JtQmFiZWxQcmVzZXQsIHBsdWdpbnM6IHRyYW5zZm9ybUJhYmVsUGx1Z2luIH0pXG4gICAgICBjb250ZXh0LmJvZHkgPSB0cmFuc2Zvcm1lZE9iamVjdC5jb2RlXG4gICAgfVxuICB9XG4gIGF3YWl0IG5leHQoKVxufSlcbiJdfQ==