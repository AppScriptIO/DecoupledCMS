"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;

var _http = _interopRequireDefault(require("http"));

var _koaBodyParser = _interopRequireDefault(require("koa-bodyParser"));
var _koaMount = _interopRequireDefault(require("koa-mount"));
var _koaViews = _interopRequireDefault(require("koa-views"));
var _oidcInteractionMiddleware = require("../../../utility/middleware/oidcInteraction.middleware.js");


var _memory_adapter = _interopRequireDefault(require("oidc-provider/lib/adapters/memory_adapter.js"));
var _oidcConfiguration = require("./oidcConfiguration.js");
var _clientApplication = require("./clientApplication.js");
var _keystore = _interopRequireDefault(require("./key/keystore.json"));
var _consoleLogStyleConfig = _interopRequireDefault(require("../../utility/consoleLogStyleConfig.js"));var _default =

({} = {}) => async () => {
  let OpenIdConnectServer;
  let openIdConnectServer = new OpenIdConnectServer(
  `${PROTOCOL}${HOST}:${self.port}`,
  _oidcConfiguration.oidcConfiguration);


  let entrypointSetting = { defaultConditionTreeKey: '' };




  await self.openIdConnectServer.
  initialize({

    clients: _clientApplication.clientArray,
    adapter: _memory_adapter.default,
    keystore: _keystore.default }).

  catch(error => {
    throw error;
  });
  const oidcKoaServer = self.openIdConnectServer.app;






  self.serverKoa.proxy = true;













  let middlewareArray = [
  (0, _koaViews.default)('/', { map: { html: 'underscore', js: 'underscore' } }),
  (0, _koaMount.default)(

  '/',
  openIdConnectServer.app),

  (0, _koaBodyParser.default)(),







  (0, _oidcInteractionMiddleware.oidcInteractionEntrypoint)({ openIdConnectServer: openIdConnectServer }),
  (0, _oidcInteractionMiddleware.oidcInteractionLogin)({ openIdConnectServer: openIdConnectServer }),
  (0, _oidcInteractionMiddleware.oidcInteractionConfirm)({ openIdConnectServer: openIdConnectServer })];


  middlewareArray.forEach(middleware => serverKoa.use(middleware));


  await new Promise((resolve, reject) => {
    _http.default.createServer(self.serverKoa.callback()).listen(self.port, () => {
      console.log(`â˜•%c ${self.name} listening on port ${self.port}`, _consoleLogStyleConfig.default.style.green);


      if (process.send !== undefined) {

        if (self.config.DEPLOYMENT == 'development') process.send({ message: 'Server listening' });
      }
    });

  });
};exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,