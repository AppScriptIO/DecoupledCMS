"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.initialize = void 0;

var _http = _interopRequireDefault(require("http"));

var _koaViews = _interopRequireDefault(require("koa-views"));
var _koaBodyparser = _interopRequireDefault(require("koa-bodyparser"));
var _oauth2Server = _interopRequireDefault(require("oauth2-server"));
var _oAuth2ServerModel = _interopRequireDefault(require("./oAuth2Server.model.js"));
var _consoleLogStyleConfig = _interopRequireDefault(require("../../utility/consoleLogStyleConfig.js"));

let MiddlewareController = createStaticInstanceClasses({ implementationType: 'Middleware', cacheName: true });
let ConditionController = createStaticInstanceClasses({ implementationType: 'Condition', cacheName: true });

const initialize = async () => {
  let Request = _oauth2Server.default.Request;
  let Response = _oauth2Server.default.Response;



  let oAuth2Server;
  let entrypointSetting = { defaultConditionTreeKey: 'XYZ' };




  _oauth2Server.default = (_oauth2Server.default, function () {throw new Error('"' + "OAuth2Server" + '" is read-only.');}());
  oAuth2Server = new _oauth2Server.default({
    debug: true,



    model: _oAuth2ServerModel.default });



  serverKoa.use((0, _koaViews.default)('/', { map: { html: 'underscore', js: 'underscore' } }));
  let middlewareArray = [
  (0, _koaBodyparser.default)(),
  async (context, next) => {


    await context.set('Access-Control-Allow-Origin', '*');
    await context.set('connection', 'keep-alive');
    await next();
  },
  async (context, next) => {


    let middlewareController = await MiddlewareController.createContext({ portAppInstance: context.instance });
    let middlewareArray = await middlewareController.initializeNestedUnit({ nestedUnitKey: 'd908335b-b60a-4a00-8c33-b9bc4a9c64ec' });
    await implementMiddlewareOnModuleUsingJson(middlewareArray)(context, next);



  },
  async (context, next) => {



    let conditionController = await ConditionController.createContext({ portAppInstance: context.instance });

    let entrypointConditionTree = '0681f25c-4c00-4295-b12a-6ab81a3cb440';
    if (process.env.SZN_DEBUG == 'true' && context.header.debug == 'true') console.log(`🍊 Entrypoint Condition Key: ${entrypointConditionTree} \n \n`);
    let callback = await conditionController.initializeNestedUnit({ nestedUnitKey: entrypointConditionTree });
    if (process.env.SZN_DEBUG == 'true' && context.header.debug == 'true') console.log(`🔀✔️ Choosen callback is: %c ${callback.name}`, _consoleLogStyleConfig.default.style.green);

    await implementConditionActionOnModuleUsingJson({ setting: callback })(context, next);

    if (callback && callback.name == 'post') {

      let x = await Class.authenticate(context.request, context.response);
      if (x) await next();
    }
  },
  async (context, next) => {
    context.status = 404;

    await next();
  }];

  middlewareArray.forEach(middleware => serverKoa.use(middleware));

  _http.default.createServer(self.serverKoa.callback()).listen(self.port, () => {
    console.log(`☕%c ${self.name} listening on port ${self.port}`, _consoleLogStyleConfig.default.style.green);


    if (process.send !== undefined) {

      if (self.config.DEPLOYMENT == 'development') process.send({ message: 'Server listening' });
    }
  });

};exports.initialize = initialize;






function authenticateMiddleware() {
  return async (request, response) => {
    console.log('authenticate function');

    let options = {
      scope: undefined,
      addAcceptedScopesHeader: true,
      addAuthorizedScopesHeader: true,
      allowBearerTokensInQueryString: false };

    let oAuthRequest = new Request(request);
    let oAuthResponse = new Response(response);
    let tokenData = await self.oAuth2Server.authenticate(oAuthRequest, oAuthResponse, options).catch(error => {
      console.log(error);
    });
    return tokenData;
  };
}








async function authorize(request, response) {
  console.log('authorize function');

  let options = {
    authenticateHandler: {
      handle: data => {


        return { username: 'example' };
      } },

    authorizationCodeLifetime: 300 };


  let oAuthRequest = new Request(request);
  let oAuthResponse = new Response(response);
  let authorizationCode = await self.oAuth2Server.authorize(oAuthRequest, oAuthResponse, options).catch(error => console.log(error));
  return authorizationCode;
}







async function token(request, response) {
  console.log('token function');
  let options = {
    accessTokenLifetime: 3600,
    refreshTokenLifetime: 1209600,
    allowExtendedTokenAttributes: true,
    alwaysIssueNewRefreshToken: false,
    requireClientAuthentication: {

      password: false,
      authorization_code: true,
      client_credentials: true,
      refresh_token: false } };



  let oAuthRequest = new Request(request);
  let oAuthResponse = new Response(response);
  let tokenData = await self.oAuth2Server.token(oAuthRequest, oAuthResponse, options).catch(error => {
    console.log('token function:' + error);
  });
  return tokenData;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,