"use strict";




function authenticateMiddleware() {
  return async (request, response) => {
    console.log('authenticate function');

    let options = {
      scope: undefined,
      addAcceptedScopesHeader: true,
      addAuthorizedScopesHeader: true,
      allowBearerTokensInQueryString: false };

    let oAuthRequest = new Request(request);
    let oAuthResponse = new Response(response);
    let tokenData = await self.oAuth2Server.authenticate(oAuthRequest, oAuthResponse, options).catch(error => {
      console.log(error);
    });
    return tokenData;
  };
}








async function authorize(request, response) {
  console.log('authorize function');

  let options = {
    authenticateHandler: {
      handle: data => {


        return { username: 'example' };
      } },

    authorizationCodeLifetime: 300 };


  let oAuthRequest = new Request(request);
  let oAuthResponse = new Response(response);
  let authorizationCode = await self.oAuth2Server.authorize(oAuthRequest, oAuthResponse, options).catch(error => console.log(error));
  return authorizationCode;
}







async function token(request, response) {
  console.log('token function');
  let options = {
    accessTokenLifetime: 3600,
    refreshTokenLifetime: 1209600,
    allowExtendedTokenAttributes: true,
    alwaysIssueNewRefreshToken: false,
    requireClientAuthentication: {

      password: false,
      authorization_code: true,
      client_credentials: true,
      refresh_token: false } };



  let oAuthRequest = new Request(request);
  let oAuthResponse = new Response(response);
  let tokenData = await self.oAuth2Server.token(oAuthRequest, oAuthResponse, options).catch(error => {
    console.log('token function:' + error);
  });
  return tokenData;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,