"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.initialize = initialize;

var _http = _interopRequireDefault(require("http"));
var _underscore = _interopRequireDefault(require("underscore"));
var _koaViews = _interopRequireDefault(require("koa-views"));
var _koa = _interopRequireDefault(require("koa"));
var _configuration = _interopRequireDefault(require("./configuration.js"));
var _consoleLogStyleConfig = _interopRequireDefault(require("../../utility/consoleLogStyleConfig.js"));
var _implementConditionActionOnModuleUsingJson = _interopRequireDefault(require("../../utility/middleware/implementConditionActionOnModuleUsingJson.js"));
var _graphTraversal = require("@dependency/graphTraversal");



var graphData = _interopRequireWildcard(require("../../../resource/sequence.graphData.json"));const { Graph } = _graphTraversal.Graph;const { Context } = _graphTraversal.Context;const { Database } = _graphTraversal.Database;

async function initializeGraph({ targetProjectConfig, additionalData }) {
  let contextInstance = new Context.clientInterface({ targetProjectConfig });
  let concreteDatabaseBehavior = new Database.clientInterface({
    implementationList: { boltCypherModelAdapter: _graphTraversal.modelAdapter.boltCypherModelAdapterFunction({ url: { protocol: 'bolt', hostname: 'localhost', port: 7687 } }) },
    defaultImplementation: 'boltCypherModelAdapter' });



  let configuredGraph = Graph.clientInterface({ parameter: [{ database: concreteDatabaseBehavior, concreteBehaviorList: [contextInstance] }] });
  let graph = new configuredGraph({});
  await graph.database.loadGraphData({ nodeEntryData: graphData.node, connectionEntryData: graphData.edge });
  console.log(`• loaded service graph data.`);
  if (additionalData) {
    await graph.database.loadGraphData({ nodeEntryData: additionalData.node, connectionEntryData: additionalData.edge });
    console.log(`• loaded additional graph data.`);
  }
  return graph;
}

async function initialize({ targetProjectConfig, entrypointKey = 'default', additionalData }) {
  let graph = await initializeGraph({ targetProjectConfig, additionalData });

  _underscore.default.templateSettings = _configuration.default.underscore;
  console.info(`• Underscore template setting set as ${_underscore.default.templateSettings.evaluate} ${_underscore.default.templateSettings.interpolate} ${_underscore.default.templateSettings.escape}`);

  let serverKoa = new _koa.default();
  serverKoa.subdomainOffset = 1;

  let middlewareArray = [
  (0, _koaViews.default)('/', { map: { html: 'underscore', js: 'underscore' } }),
  async (context, next) => {
    context.set('connection', 'keep-alive');
    await next();
  },
  async (context, next) => {
    if (context.header.debug == 'true') console.log(`• Entrypoint Key: ${entrypointKey} \n \n`);
    let callbackOption = await graph.traverse({ nodeKey: entrypointKey });

    if (context.header.debug == 'true') console.log(`🔀✔️ Choosen callback is: %c ${callbackOption.name}`, _consoleLogStyleConfig.default.style.green);

    let composedMiddleware = await (0, _implementConditionActionOnModuleUsingJson.default)({ setting: callbackOption });
    await composedMiddleware(context, next);
  }];

  middlewareArray.forEach(middleware => serverKoa.use(middleware));

  _http.default.
  createServer(serverKoa.callback()).
  on('connection', socket => {





  }).
  setTimeout(0, () => console.log('HTTP server connection socket was timedout (console.log in httpServer.setTimeout)!')).
  listen(1, () => {
    if (process.send !== undefined) process.send({ message: 'Server listening' });
    process.emit('listening');
    console.log(`☕%c ${_configuration.default.serviceName} listening on port ${1}`, _consoleLogStyleConfig.default.style.green);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,