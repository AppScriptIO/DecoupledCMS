"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.serveServerSideRenderedFile = serveServerSideRenderedFile;exports.renderTemplateDocument = renderTemplateDocument;exports.serveStaticFile = void 0;
var _path = _interopRequireDefault(require("path"));
var _fs = _interopRequireDefault(require("fs"));


var _underscore = _interopRequireDefault(require("underscore"));

var _koaSendfile = _interopRequireDefault(require("koa-sendfile"));

var _ApplicationClass = _interopRequireDefault(require("../../class/Application.class.js"));
var _middlewarePatternDecorator = require("@dependency/commonPattern/source/middlewarePatternDecorator.js");
var _reusableNestedUnit = _interopRequireDefault(require("../../module/reusableNestedUnit"));
var _getTableDocumentQuery = _interopRequireDefault(require("@dependency/databaseUtility/source/getTableDocument.query.js"));
var _wrapStringStream = require("@dependency/wrapStringStream");






let serveStaticFile = (0, _middlewarePatternDecorator.functionWrappedMiddlewareDecorator)(async function (context, next, option) {
  let relativeFilePath = option.filePath || context.path;
  let baseFolderRelativePath = option.directoryRelativePath || '';
  let clientSidePath = context.instance.config.clientSidePath;
  let absoluteFilePath = _path.default.normalize(_path.default.join(clientSidePath, baseFolderRelativePath, relativeFilePath));
  let fileStats = await (0, _koaSendfile.default)(context, absoluteFilePath);
  if (!fileStats || !fileStats.isFile()) {

    await next();
  }



});exports.serveStaticFile = serveStaticFile;



async function serveServerSideRenderedFile(context, next, option) {
  let clientSidePath = context.instance.config.clientSidePath;
  let baseFolderRelativePath = option.directoryRelativePath || '';
  let filePath = option.filePath || context.path;
  let renderType = option.renderType ?
  option.renderType :
  filePath.substr(filePath.lastIndexOf('$') + 1, filePath.length);
  let lastIndexPosition = filePath.lastIndexOf('$') == -1 ? filePath.length : filePath.lastIndexOf('$');
  let relativeFilePath = option.renderType ? filePath : filePath.substr(0, lastIndexPosition);
  let absoluteFilePath = _path.default.normalize(_path.default.join(clientSidePath, baseFolderRelativePath, relativeFilePath));

  let renderedContent;
  switch (renderType) {
    case 'convertSharedStylesToJS':
      renderedContent = await convertSharedStylesToJS({ filePath: absoluteFilePath, context });
      context.body = renderedContent;
      context.response.type = 'application/javascript';
      await next();
      break;
    case 'covertTextFileToJSModule':
      renderedContent = await covertTextFileToJSModule({ filePath: absoluteFilePath, context });
      context.body = renderedContent;
      context.response.type = 'application/javascript';
      await next();
      break;
    case 'renderHTMLImportWebcomponent':
      renderedContent = renderHTMLImportWebcomponent({ filePath: absoluteFilePath, context });
      context.body = renderedContent;
      await next();
      break;
    case 'renderJSImportWebcomponent':
      renderedContent = renderJSImportWebcomponent({ filePath: absoluteFilePath, context });
      context.response.type = 'application/javascript';
      context.body = renderedContent;
      await next();
      break;
    default:
      if (option.mimeType) {

        try {

          renderedContent = _fs.default.readFileSync(absoluteFilePath, 'utf8');
          context.body = _underscore.default.template(renderedContent)({
            Application: _ApplicationClass.default,
            context,
            view: {},
            argument: {} });


          context.response.type = option.mimeType;
        } catch (error) {
          console.log(error);
          await next();
        }
      } else {
        if (_fs.default.existsSync(absoluteFilePath) && _fs.default.statSync(absoluteFilePath).isFile()) {

          await context.render(absoluteFilePath, {
            context,
            Application: _ApplicationClass.default,
            view: {},
            argument: { layoutElement: 'webapp-layout-list' } });

          context.response.type = _path.default.extname(absoluteFilePath);
          await next();
        } else {
          await next();
        }
      }
      break;}




}
exports.serveServerSideRenderedFile = serveServerSideRenderedFile = (0, _middlewarePatternDecorator.functionWrappedMiddlewareDecorator)(serveServerSideRenderedFile);





async function convertSharedStylesToJS({ filePath, context }) {
  let fileStream = _fs.default.createReadStream(filePath);
  return await (0, _wrapStringStream.wrapStringStream)({
    stream: fileStream,
    beforeString: "const $_documentContainer = document.createElement('div'); $_documentContainer.setAttribute('style', 'display: none;'); $_documentContainer.innerHTML = `",
    afterString: '`;document.head.appendChild($_documentContainer);' });

}


async function covertTextFileToJSModule({ filePath, context }) {
  let fileStream = _fs.default.createReadStream(filePath);
  return await (0, _wrapStringStream.wrapStringStream)({ stream: fileStream, beforeString: 'export default `', afterString: '`' });
}




function renderJSImportWebcomponent({ filePath, context }) {
  let fileDirectoryPath = filePath.substr(0, filePath.lastIndexOf('/'));
  let argument = { layoutElement: 'webapp-layout-list' };
  let view = {};

  let templatePart = {
    css: _underscore.default.template(_fs.default.readFileSync(`${fileDirectoryPath}/component.css`, 'utf8'))({ Application: _ApplicationClass.default, argument }),
    html: _underscore.default.template(_fs.default.readFileSync(`${fileDirectoryPath}/component.html`, 'utf8'))({ Application: _ApplicationClass.default, argument }) };

  try {
    let content = _fs.default.readFileSync(filePath, 'utf8');
    let rendered = _underscore.default.template(content)({ Application: _ApplicationClass.default, view, argument: Object.assign(argument, templatePart) });
    return rendered;
  } catch (error) {
    console.log(error);
  }
}




function renderHTMLImportWebcomponent({ filePath, context }) {
  let fileDirectoryPath = filePath.substr(0, filePath.lastIndexOf('/'));
  let argument = { layoutElement: 'webapp-layout-list' };
  let view = {};

  let templatePart = {
    css: _underscore.default.template(_fs.default.readFileSync(`${fileDirectoryPath}/component.css`, 'utf8'))({ Application: _ApplicationClass.default, argument }),
    js: _underscore.default.template(_fs.default.readFileSync(`${fileDirectoryPath}/component.js`, 'utf8'))({ Application: _ApplicationClass.default, argument }),
    html: _underscore.default.template(_fs.default.readFileSync(`${fileDirectoryPath}/component.html`, 'utf8'))({ Application: _ApplicationClass.default, argument }) };

  try {
    let content = _fs.default.readFileSync(filePath, 'utf8');
    let rendered = _underscore.default.template(content)({ Application: _ApplicationClass.default, view, argument: Object.assign(argument, templatePart) });
    return rendered;
  } catch (error) {
    console.log(error);
  }
}




let getTableDocument = {
  generate: _getTableDocumentQuery.default,
  instance: [] };

getTableDocument.instance['template_documentBackend'] = getTableDocument.generate('webappSetting', 'template_documentBackend');
function renderTemplateDocument({ documentKey }) {
  let TemplateController = (0, _reusableNestedUnit.default)({
    Superclass: _ApplicationClass.default,
    implementationType: 'Template' });

  return async (context, next) => {
    let connection = _ApplicationClass.default.rethinkdbConnection;
    let documentObject = await getTableDocument.instance['template_documentBackend'](connection, documentKey);



    let templateController = await TemplateController.createContext({ portAppInstance: context.instance });

    let renderedContent = await templateController.initializeNestedUnit({ nestedUnitKey: documentObject.templateNestedUnit });
    context.body = renderedContent;

    await next();
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,